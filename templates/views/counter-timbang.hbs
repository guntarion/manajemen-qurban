<h1>Counter Timbang</h1>

<h3>Komulatif Inventory</h3>
<table id="numberInventoryFromDatabase">
	<tr>
		<th style="width: 300px; font-size: 21px; text-align: center;">Jenis</th>
		<th style="width: 100px; font-size: 21px; text-align: center;">Kuanti</th>
		<th style="width: 100px; font-size: 21px; text-align: center;">Target</th>
		<th style="width: 100px; font-size: 21px; text-align: center;">Prosen</th>
		<th style="width: 100px; font-size: 21px; text-align: center;">Kurang</th>
	</tr>
	<tr>
		<td style="font-size: 21px; text-align: center; padding: 20px">🐮🙂 3 kg (Pengqurban)</td>
		<td id="sapipengqurban3kg-value" style="font-size: 21px; text-align: center; padding: 20px">
			{{timbang.Sapi_three_kg}}</td>
		<td id="sapipengqurban3kg-target" style="font-size: 21px; text-align: center; padding: 20px">400</td>
		<td id="sapipengqurban3kg-percent" style="font-size: 21px; text-align: center; padding: 20px">0%</td>
		<td id="sapipengqurban3kg-remaining" style="font-size: 21px; text-align: center; padding: 20px">300</td>
	</tr>
	<tr>
		<td style="font-size: 21px; text-align: center; padding: 20px">🐮🐐 2 kg (Panitia)</td>
		<td id="sapikambing2kg-value" style="font-size: 21px; text-align: center; padding: 20px">{{timbang.Sapi_one_kg}}
		</td>
		<td id="sapikambing2kg-target" style="font-size: 21px; text-align: center; padding: 20px">100</td>
		<td id="sapikambing2kg-percent" style="font-size: 21px; text-align: center; padding: 20px">0%</td>
		<td id="sapikambing2kg-remaining" style="font-size: 21px; text-align: center; padding: 20px">100</td>
	</tr>
</table>



<form style="display: flex;">
	<div style="flex: 1;">
		<h4>Select Weight</h4>
		<div>
			<input id="sapi3kg" class="radio-style" name="weight" type="radio" checked>
			<label for="sapi3kg" class="radio-style-2-label">🐮 Sapi 3 kg</label>
		</div>
		<div>
			<input id="sapi1kg" class="radio-style" name="weight" type="radio">
			<label for="sapi1kg" class="radio-style-2-label">🐮 Sapi 1 kg</label>
		</div>
		<div>
			<input id="sapiHalfKg" class="radio-style" name="weight" type="radio">
			<label for="sapiHalfKg" class="radio-style-2-label">🐮 Sapi ½ kg</label>
		</div>
		<div>
			<input id="kambingHalfKg" class="radio-style" name="weight" type="radio">
			<label for="kambingHalfKg" class="radio-style-2-label">🐐 Kambing ½ kg</label>
		</div>
		<div>
			<input id="campurHalfKg" class="radio-style" name="weight" type="radio">
			<label for="campurHalfKg" class="radio-style-2-label">🐣 Campur ½ kg</label>
		</div>
		<div>
			<input id="jeroan" class="radio-style" name="weight" type="radio">
			<label for="jeroan" class="radio-style-2-label">🪺 Jeroan</label>
		</div>
	</div>

	<div style="flex: 1;">
		<h4>Select Quantity</h4>
		<a href="#" id="button1" class="button button-3d button-xlarge button-rounded button-dirtygreen" data-value="1"
			data-id="1" data-counter="sapi3kg-counter">1</a><br>
		<a href="#" id="button5" class="button button-3d button-xlarge button-rounded button-dirtygreen" data-value="5"
			data-id="2" data-counter="sapi1kg-counter">5</a><br>
		<a href="#" id="button10" class="button button-3d button-xlarge button-rounded button-dirtygreen"
			data-value="10" data-id="3" data-counter="sapiHalfKg-counter">10</a><br>
		<a href="#" id="button15" class="button button-3d button-xlarge button-rounded button-dirtygreen"
			data-value="15" data-id="4" data-counter="kambingHalfKg-counter">15</a>
	</div>
</form>

<h3>Komulatif Timbang</h3>
<table id="numberTimbangFromDatabase">
	<tr>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐮 3</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐮 1</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐮 ½</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐐 ½</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐣 ½</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🪺</th>
	</tr>
	<tr>
		<td id="sapi3kg-database" style="font-size: 40px; text-align: center;">{{timbang.Sapi_three_kg}}</td>
		<td id="sapi1kg-database" style="font-size: 40px; text-align: center;">{{timbang.Sapi_one_kg}}</td>
		<td id="sapiHalfKg-database" style="font-size: 40px; text-align: center;">{{timbang.Sapi_half_kg}}</td>
		<td id="kambingHalfKg-database" style="font-size: 40px; text-align: center;">{{timbang.Kambing_half_kg}}</td>
		<td id="campurHalfKg-database" style="font-size: 40px; text-align: center;">{{timbang.Campur_half_kg}}</td>
		<td id="jeroan-database" style="font-size: 40px; text-align: center;">{{timbang.Jeroan}}</td>
	</tr>
</table>

<table id="counterTimbangFrontEnd">
	<tr>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐮 3</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐮 1</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐮 ½</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐐 ½</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🐣 ½</th>
		<th style="width: 100px; font-size: 25px; text-align: center;">🪺</th>
	</tr>
	<tr>
		<td id="sapi3kg-counter" style="font-size: 40px; text-align: center;">0</td>
		<td id="sapi1kg-counter" style="font-size: 40px; text-align: center;">0</td>
		<td id="sapiHalfKg-counter" style="font-size: 40px; text-align: center;">0</td>
		<td id="kambingHalfKg-counter" style="font-size: 40px; text-align: center;">0</td>
		<td id="campurHalfKg-counter" style="font-size: 40px; text-align: center;">0</td>
		<td id="jeroan-counter" style="font-size: 40px; text-align: center;">0</td>
	</tr>
	<tr>
		<td style="text-align: center;"><button id="sapi3kg-decrease"
				class="decrease-button button button-3d button-mini button-rounded button-teal">minus</button></td>
		<td style="text-align: center;"><button id="sapi1kg-decrease"
				class="decrease-button button button-3d button-mini button-rounded button-teal">minus</button></td>
		<td style="text-align: center;"><button id="sapiHalfKg-decrease"
				class="decrease-button button button-3d button-mini button-rounded button-teal">minus</button></td>
		<td style="text-align: center;"><button id="kambingHalfKg-decrease"
				class="decrease-button button button-3d button-mini button-rounded button-teal">minus</button></td>
		<td style="text-align: center;"><button id="campurHalfKg-decrease"
				class="decrease-button button button-3d button-mini button-rounded button-teal">minus</button></td>
		<td style="text-align: center;"><button id="jeroan-decrease"
				class="decrease-button button button-3d button-mini button-rounded button-teal">minus</button></td>
	</tr>
</table>

<div style="margin: 20px;">
	<h4>History Penambahan</h4>
	<ul id="history"></ul>
</div>

<style>
	table {
		border-collapse: collapse;
	}

	td,
	th {
		border-right: 1px solid #000;
		border-left: 1px solid #000;
	}

	th:first-child,
	td:first-child {
		border-left: none;
	}

	th:last-child,
	td:last-child {
		border-right: none;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', (event) => {
		const socket = new WebSocket('ws://localhost:5050');

		socket.addEventListener('open', (event) => {
			console.log('Counter Timbang is Connected to WebSocket server');
		});

		socket.addEventListener('message', (event) => {
			const data = JSON.parse(event.data);
			console.log('WebSocket message received:', data);
			if (data.type === 'update-timbang') {
				document.getElementById('sapi3kg-database').textContent = data.timbang.Sapi_three_kg;
				document.getElementById('sapi1kg-database').textContent = data.timbang.Sapi_one_kg;
				document.getElementById('sapiHalfKg-database').textContent = data.timbang.Sapi_half_kg;
				document.getElementById('kambingHalfKg-database').textContent = data.timbang.Kambing_half_kg;
				document.getElementById('campurHalfKg-database').textContent = data.timbang.Campur_half_kg;
				document.getElementById('jeroan-database').textContent = data.timbang.Jeroan;

				// Update the relevant fields for the new table
				document.getElementById('sapipengqurban3kg-value').textContent = data.timbang.Sapi_three_kg;
				document.getElementById('sapikambing2kg-value').textContent = data.timbang.Sapi_one_kg;

				// Update the percentage and remaining fields for each item
				updatePercentageAndRemaining('sapipengqurban3kg');
				updatePercentageAndRemaining('sapikambing2kg');
			}
		});


		socket.addEventListener('close', (event) => {
			console.log('Counter Timbang is Disconnected from WebSocket server');
		});

		// Ensure WebSocket is open before sending a message
		function sendWebSocketMessage(data) {
			if (socket.readyState === WebSocket.OPEN) {
				socket.send(JSON.stringify(data));
			} else {
				console.log('WebSocket is not open. ReadyState:', socket.readyState);
			}
		}

		// Add the click event listeners for the buttons
		const buttons = document.querySelectorAll('.button');
		buttons.forEach(button => button.addEventListener('click', handleClick));

		// Add the click event listeners for the decrease buttons
		const decreaseButtons = document.querySelectorAll('.decrease-button');
		decreaseButtons.forEach(button => button.addEventListener('click', handleDecreaseClick));

		function handleClick(event) {
			event.preventDefault();

			const selectedRadioButton = document.querySelector('input[name="weight"]:checked');
			if (!selectedRadioButton) {
				alert('Please select a weight first.');
				return;
			}

			const counterId = selectedRadioButton.id;
			const counterElement = document.getElementById(counterId + '-counter');
			if (!counterElement) {
				console.error('No counter element found with id:', counterId);
				return;
			}

			const idMap = {
				'sapi3kg': 1,
				'sapi1kg': 2,
				'sapiHalfKg': 3,
				'kambingHalfKg': 4,
				'campurHalfKg': 5,
				'jeroan': 6,
			};

			const hasil_timbang_id = idMap[counterId];
			if (!hasil_timbang_id) {
				console.error('No hasil_timbang_id found for id:', counterId);
				return;
			}

			const buttonValue = parseInt(event.target.getAttribute('data-value'), 10);
			if (isNaN(buttonValue)) {
				console.error('Invalid button value:', buttonValue);
				return;
			}

			const currentCounterValue = parseInt(counterElement.textContent, 10);
			counterElement.textContent = currentCounterValue + buttonValue;

			const idToNameMap = {
				'sapi3kg': '🐮 Sapi 3 kg',
				'sapi1kg': '🐮 Sapi 1 kg',
				'sapiHalfKg': '🐮 Sapi ½ kg',
				'kambingHalfKg': '🐐 Kambing ½ kg',
				'campurHalfKg': '🐣 Campur ½ kg',
				'jeroan': '🪺 Jeroan',
			};

			const name = idToNameMap[counterId];
			if (!name) {
				console.error('No name found for id:', counterId);
				return;
			}

			const historyElement = document.getElementById('history');
			const historyItem = document.createElement('li');
			const currentTime = new Date().toLocaleTimeString();
			historyItem.textContent = `Added ${buttonValue} to ${name} (${currentTime})`;
			historyElement.insertBefore(historyItem, historyElement.firstChild);

			while (historyElement.children.length > 20) {
				historyElement.removeChild(historyElement.lastChild);
			}

			console.log('Sending AJAX request to /api/history-timbang');
			fetch('/api/history-timbang', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					hasil_timbang_id: hasil_timbang_id,
					operation: 'add',
					value: buttonValue,
				}),
			})
				.then(response => response.json())
				.then(data => {
					console.log('Response from /api/history-timbang:', data);
					// Send a WebSocket message to update the counter in real-time
					sendWebSocketMessage({
						type: 'update-counter',
						hasil_timbang_id: hasil_timbang_id,
						value: currentCounterValue + buttonValue,
					});
				})
				.catch(error => {
					console.error('Error:', error);
				});
		}

		function handleDecreaseClick(event) {
			event.preventDefault();

			const counterId = event.target.id.replace('-decrease', '');
			const counterElement = document.getElementById(counterId + '-counter');

			counterElement.textContent = Number(counterElement.textContent) - 1;

			const idMap = {
				'sapi3kg': 1,
				'sapi1kg': 2,
				'sapiHalfKg': 3,
				'kambingHalfKg': 4,
				'campurHalfKg': 5,
				'jeroan': 6,
			};

			const hasil_timbang_id = idMap[counterId];
			if (!hasil_timbang_id) {
				console.error('No hasil_timbang_id found for id:', counterId);
				return;
			}

			const idToNameMap = {
				'sapi3kg': '🐮 Sapi 3 kg',
				'sapi1kg': '🐮 Sapi 1 kg',
				'sapiHalfKg': '🐮 Sapi ½ kg',
				'kambingHalfKg': '🐐 Kambing ½ kg',
				'campurHalfKg': '🐣 Campur ½ kg',
				'jeroan': '🪺 Jeroan',
			};

			const name = idToNameMap[counterId];
			if (!name) {
				console.error('No name found for id:', counterId);
				return;
			}

			const historyElement = document.getElementById('history');
			const historyItem = document.createElement('li');
			const currentTime = new Date().toLocaleTimeString();
			historyItem.textContent = `Decreased 1 from ${name} (${currentTime})`;
			historyElement.insertBefore(historyItem, historyElement.firstChild);

			while (historyElement.children.length > 20) {
				historyElement.removeChild(historyElement.lastChild);
			}

			console.log('Sending AJAX request to /api/history-timbang');
			fetch('/api/history-timbang', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					hasil_timbang_id: hasil_timbang_id,
					operation: 'decrease',
					value: 1,
				}),
			})
				.then(response => response.json())
				.then(data => {
					console.log('Response from /api/history-timbang:', data);
					// Send a WebSocket message to update the counter in real-time
					sendWebSocketMessage({
						type: 'update-counter',
						hasil_timbang_id: hasil_timbang_id,
						value: Number(counterElement.textContent),
					});
				})
				.catch(error => {
					console.error('Error:', error);
				});
		}

		function updatePercentageAndRemaining(counterId) {
			const valueElement = document.getElementById(counterId + '-value');
			const targetElement = document.getElementById(counterId + '-target');
			const percentElement = document.getElementById(counterId + '-percent');
			const remainingElement = document.getElementById(counterId + '-remaining');

			const value = parseInt(valueElement.textContent, 10);
			const target = parseInt(targetElement.textContent, 10);

			const percent = ((value / target) * 100).toFixed(2);
			const remaining = target - value;

			percentElement.textContent = percent + '%';
			remainingElement.textContent = remaining;
		}

		// Initial calculation
		updatePercentageAndRemaining('sapipengqurban3kg');
		updatePercentageAndRemaining('sapikambing2kg');
	});
</script>